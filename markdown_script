---
title: "Quarterly output manipulation National Accounts"
author: "Rendell E . de Kort"
date: "March 28, 2019"
output: word_document
---

```{r, eval = FALSE, warning = FALSE, error = FALSE}
data1    <-  read.csv("Q_DENTON.csv", stringsAsFactors = FALSE)
data1$Value<-as.numeric(data1$Value)
data2    <-  read.csv("Q_NO_DENTON.csv", stringsAsFactors = FALSE)
stavaza  <-  read.csv("stavazaR.csv", stringsAsFactors = FALSE)
```


## About this file

This is an explanatory note for the steps to convert quarterly output information obtained through the "Herbynization", "quarterly estimation" and "quarterly exceptions" file.

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

## Reading in the data
Data should be in "Comma Seperated Values" (csv.) format to be loaded in and saved in the folder that is consistent with the Working Directory of th R session.

Load the required packages and transform the data into a tbl_df format. Data is then merged in a single table.
```{r, warning = FALSE, error = FALSE, message=FALSE}
library(dplyr)
library(tidyr)
library(formattable)
library(dygraphs)
library(treemap)
library(treemapify)
library(ggplot2)
library(formattable)
```

Combining data sets to a single dataframe
```{r, results='hide', warning = FALSE, error = FALSE, message=FALSE}
data1                  <- tbl_df(data1)
data2                  <- tbl_df(data2)
databind               <- bind_rows(data1,data2)
rm(data1)
rm(data2)
dplyr::arrange(databind,STATID)
```

Filtering data to contain the variables that we are interested in seperatly
```{r}
Nominal_Q              <- filter(databind,databind$Description=="Nominal VA")
Nominal_Q$Description  <- NULL

Real_Q                 <- filter(databind,databind$Description=="Real VA")
Real_Q$Description     <- NULL

Nominal_Y              <- filter(databind,databind$Description=="B nominal")
Nominal_Y$Description  <- NULL

Real_Y                 <- filter(databind,databind$Description=="B Real")
Real_Y$Description     <- NULL

Deflator_Y               <- filter(databind,databind$Description=="Deflator")
Deflator_Y$Description   <- NULL

rm(databind)
```

Long to wide format
```{r}
Deflator_Y   <-spread(Deflator_Y,Period,Value)
Nominal_Q  <-spread(Nominal_Q,Period,Value)
Nominal_Y  <-spread(Nominal_Y,Period,Value)
Real_Q     <-spread(Real_Q,Period,Value)
Real_Y     <-spread(Real_Y,Period,Value)
```

Creating a check to verify whether the year figures are consistent with Stavaza
```{r, results = 'hide'}
Check.Nominal.Y.2013   <-select(Nominal_Y,STATID,`2013`)

as.character(stavaza$Werk.ISIC)
 
stavaza_temp              <- select(stavaza,
                           c(Werk.ISIC,B1.g,TAB.CAT,TAB.CAT_DESCRIPTION,ISIC_DESCRIPTION))

Check.Nominal.Y.2013   <- select(Check.Nominal.Y.2013,c(STATID,`2013`))

Test.equality          <- left_join(stavaza_temp,Check.Nominal.Y.2013,
                            by=c("Werk.ISIC"="STATID"))

rm(Check.Nominal.Y.2013)

Test.equality$Check    <-Test.equality$`2013`==Test.equality$B1.g

Test.equality          <- Test.equality[,c(1,3,4,5,2,6,7)]
dplyr::arrange(Test.equality,Werk.ISIC)
rm(stavaza_temp)
```

Changing the variable names for consistency: 
```{r}
Deflator_Y  <- setNames(Deflator_Y,  c("STATID",
                                   "Y_2013",
                                   "Y_2014",
                                   "Y_2015",
                                   "Y_2016",
                                   "Y_2017"
                                   ))
Nominal_Y <- setNames(Nominal_Y, c("STATID",
                                   "Y_2013",
                                   "Y_2014",
                                   "Y_2015",
                                   "Y_2016",
                                   "Y_2017"
                                   ))
Real_Y    <- setNames(Real_Y,    c("STATID",
                                   "Y_2013",
                                   "Y_2014",
                                   "Y_2015",
                                   "Y_2016",
                                   "Y_2017"
                                   ))
```

The left_join function merges two data sets and after that we select and arrange the variables 
```{r, results = 'hide'}
# Deflator
Deflator_Y<- left_join(Deflator_Y,stavaza,
                   by=c("STATID"="Werk.ISIC"))
Deflator_Y<- select(Deflator_Y,c(STATID,
                             TAB.CAT,
                             Deflator.1,
                             Deflator.2,
                             TAB.CAT_DESCRIPTION,
                             ISIC_DESCRIPTION,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017
                                       ))
dplyr::arrange(Deflator_Y,TAB.CAT)

# Nominal_Y
Nominal_Y<- left_join(Nominal_Y,stavaza,
                   by=c("STATID"="Werk.ISIC"))
Nominal_Y<- select(Nominal_Y,c(STATID,
                               TAB.CAT,
                               Deflator.1,
                               Deflator.2,
                               TAB.CAT_DESCRIPTION,
                               ISIC_DESCRIPTION,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017
                                       ))
dplyr::arrange(Nominal_Y,TAB.CAT)

# Real_Y
Real_Y<- left_join(Real_Y,stavaza,
                   by=c("STATID"="Werk.ISIC"))
Real_Y<- select(Real_Y,c(STATID,
                         TAB.CAT,
                               Deflator.1,
                               Deflator.2,
                               TAB.CAT_DESCRIPTION,
                               ISIC_DESCRIPTION,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017
                                        ))
dplyr::arrange(Real_Y,TAB.CAT)

# Nominal_Q
Nominal_Q<- left_join(Nominal_Q,stavaza,
                   by=c("STATID"="Werk.ISIC"))
Nominal_Q          <- Nominal_Q[,c(1,26,36,37,27,28,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)]
dplyr::arrange(Nominal_Q,TAB.CAT)

# Real_Q
Real_Q<- left_join(Real_Q,stavaza,
                   by=c("STATID"="Werk.ISIC"))
Real_Q          <- Real_Q[,c(1,26,36,37,27,28,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)]
dplyr::arrange(Real_Q,TAB.CAT)

```

Grouping by TAB.CAT for Publication tables
```{r}
# Nominal_Y
PUB_Nominal_Y <- group_by(Nominal_Y,TAB.CAT) %>%
  summarise(TAB.CAT_DESCRIPTION=first(TAB.CAT_DESCRIPTION),
    Y.2013=sum(Y_2013),
    Y.2014=sum(Y_2014),
    Y.2015=sum(Y_2015),
    Y.2016=sum(Y_2016),
    Y.2017=sum(Y_2017)
  )

# Real_Y
PUB_Real_Y <- group_by(Real_Y,TAB.CAT) %>%
  summarise(TAB.CAT_DESCRIPTION=first(TAB.CAT_DESCRIPTION),
    Y.2013=sum(Y_2013),
    Y.2014=sum(Y_2014),
    Y.2015=sum(Y_2015),
    Y.2016=sum(Y_2016),
    Y.2017=sum(Y_2017)
  )

# Nominal_Q
PUB_Nominal_Q <- group_by(Nominal_Q,TAB.CAT) %>%
  summarise(TAB.CAT_DESCRIPTION=first(TAB.CAT_DESCRIPTION),
    Q.2013.1=sum(`2013-1`),
    Q.2013.2=sum(`2013-2`),
    Q.2013.3=sum(`2013-3`),
    Q.2013.4=sum(`2013-4`),
    Q.2014.1=sum(`2014-1`),
    Q.2014.2=sum(`2014-2`),
    Q.2014.3=sum(`2014-3`),
    Q.2014.4=sum(`2014-4`),
    Q.2015.1=sum(`2015-1`),
    Q.2015.2=sum(`2015-2`),
    Q.2015.3=sum(`2015-3`),
    Q.2015.4=sum(`2015-4`),
    Q.2016.1=sum(`2016-1`),
    Q.2016.2=sum(`2016-2`),
    Q.2016.3=sum(`2016-3`),
    Q.2016.4=sum(`2016-4`),
    Q.2017.1=sum(`2017-1`),
    Q.2017.2=sum(`2017-2`),
    Q.2017.3=sum(`2017-3`),
    Q.2017.4=sum(`2017-4`)
  )
```

Creating growth variables
```{r}
PUB_Nominal_Y$g.2014  <- (PUB_Nominal_Y$Y.2014/PUB_Nominal_Y$Y.2013-1)*100
PUB_Nominal_Y$g.2015  <- (PUB_Nominal_Y$Y.2015/PUB_Nominal_Y$Y.2014-1)*100
PUB_Nominal_Y$g.2016  <- (PUB_Nominal_Y$Y.2016/PUB_Nominal_Y$Y.2015-1)*100
PUB_Nominal_Y$g.2017  <- (PUB_Nominal_Y$Y.2017/PUB_Nominal_Y$Y.2016-1)*100

PUB_Real_Y$g.2014     <- (PUB_Real_Y$Y.2014/PUB_Real_Y$Y.2013-1)*100
PUB_Real_Y$g.2015     <- (PUB_Real_Y$Y.2015/PUB_Real_Y$Y.2014-1)*100
PUB_Real_Y$g.2016     <- (PUB_Real_Y$Y.2016/PUB_Real_Y$Y.2015-1)*100
PUB_Real_Y$g.2017     <- (PUB_Real_Y$Y.2017/PUB_Real_Y$Y.2016-1)*100
```

Create Treemap
```{r}
ggplot2::ggplot(PUB_Nominal_Y, ggplot2::aes(area = Y.2017, 
                                            fill = g.2017,
                                            label=TAB.CAT_DESCRIPTION)) + 
                                        geom_treemap()+
                                        ggtitle("Nominal GDP 2017")+
                                        geom_treemap_text()
```

One more consistency check, checking the sum of the quarterly nominal GDP whether it adds up to the right amount for 2013.
```{r}
Test.equality <- Test.equality[-57, ]
Test.equality$q.check <- Nominal_Q$`2013-1`+Nominal_Q$`2013-2`+Nominal_Q$`2013-3`+Nominal_Q$`2013-4`
Test.equality$Check2    <-Test.equality$`2013`==Test.equality$q.check
````


Create output in csv. Works. However, would like to have all the tabs combined.
```{r}
write.csv(Deflator, 
          file =         "Output_Deflator.csv")
write.csv(Nominal_Q, 
          file =         "Output_Nominal_Q.csv")
write.csv(Real_Q, 
          file =         "Output_Real_Q.csv")
write.csv(Nominal_Y, 
          file =         "Output_Nominal_Y.csv")
write.csv(Real_Y, 
          file =         "Output_Real_Y.csv")
write.csv(Test.equality, 
          file =         "Output_Summary.csv")
```

Creating publication tables
```{r}
PUB_Nominal_Y  <- setNames(PUB_Nominal_Y,
                           c(
                             "Sector description",
                                             "2013",
                                             "2014",
                                             "2015",
                                             "2016",
                                             "2017",
                                             "G.2014",
                                             "G.2015",
                                             "G.2016",
                                             "G.2017"
                                             ))

PUB_Nominal_Y.L <-select(PUB_Nominal_Y,
                         'Sector description',
                         '2013',
                         '2014',
                         '2015',
                         '2016',
                         '2017'
                         )
PUB_Nominal_Y.L[,-1] <-round(PUB_Nominal_Y.L[,-1],2)
```

```{r}
write.csv(PUB_Nominal_Y.L,
          file =  "PUB_Nom_Y_L.csv")
write.csv(PUB_Nominal_Q,
          file =  "PUB_Nom_Q.csv")
```
Creating aditional variables
```{r}
CBS.Nom.year          <-c(4836.2,
                          4949.8,
                          5225.9,
                          5308.9,
                          5476.0
                          )

CBA.Nom.year          <-c(4618.28796359993,
                          4742.50216019128,
                          4817.75420489927,
                          4755.63855767319,
                          4793.04253070106
                          )
```
Converting to time seris format
```{r}
CBS.Nom.year          <-ts(CBS.Nom.year,
                           frequency = 1,
                           start = 2013
                           )


CBA.Nom.year          <-ts(CBA.Nom.year, 
                           frequency = 1,
                           start=2013
                           )
```
Converting times series to nice graphs
```{r}
Nominal.level <-cbind(CBS.Nom.year,CBA.Nom.year)
dygraph(Nominal.level,
        main="Nominal GDP (in Afl.)",
        ylab="in Afl.",
        xlab="Years")%>%
  dyAxis("x", drawGrid = FALSE)%>%
  dyOptions(axisLineColor = "navy", 
            gridLineColor = "lightblue") 
```

Creating the sequence calculation for deflators.
First step is to perform the calculation on variables pertaining to the "Own" deflator category. Here we merge the files for Nominal_Q and Real_Q in a single dataframe. 


```{r}

Own$'D.2013-1'[which(Own$Deflator.2 == "Own")] <- Own$'2013-1'/Own$'2013-11'*100


# If Own$Deflator.2 =="Group" <- Group by TAB.CAT. Sum nominal, sum real. Nominal by Real * 100


# If Own$Deflator.2 =="All" <- sum all nominal / sum all real *100


# Deflator = Nominal/Real* 100  
```
