---
title: "Quarterly output manipulation National Accounts"
author: "Rendell E . de Kort"
date: "January 31, 2019"
output: word_document
---

```{r v}
data1    <-  read.csv("Q_DENTON.csv")
data2    <-  read.csv("Q_NO_DENTON.csv")
data3    <-  read.csv("Q_Weirdos.csv")
stavaza  <-  read.csv("stavazaR.csv")
```

## About this file

This is an explanatory note for the steps to convert quarterly output information obtained through the "Herbynization", "quarterly estimation" and "quarterly exceptions" file.

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.



## Reading in the data (not working in the Shiny code)
Data should be in "Comma Seperated Values" (csv.) format to be loaded in and saved in the folder that is consistent with the Working Directory of th R session.


Load the required packages and transform the data into a tbl_df format. Data is then merged in a single table.
```{r a}
library(dplyr)
library(tidyr)
data1                  <- tbl_df(data1)
data2                  <- tbl_df(data2)
data3                  <- tbl_df(data3)
databind               <- bind_rows(data1,data2,data3)
rm(data1)
rm(data2)
rm(data3)
dplyr::arrange(databind,STATID)
```

Filtering data to contain the variables that we are interested in seperatly
```{r b}

Nominal_Q              <- filter(databind,databind$Description=="Nominal VA")
Nominal_Q$Description  <- NULL

Real_Q                 <- filter(databind,databind$Description=="Real VA")
Real_Q$Description     <- NULL

Nominal_Y              <- filter(databind,databind$Description=="B nominal")
Nominal_Y$Description  <- NULL

Real_Y                 <- filter(databind,databind$Description=="B Real")
Real_Y$Description     <- NULL

Deflator               <- filter(databind,databind$Description=="Deflator")
Deflator$Description   <- NULL

rm(databind)
```

Long to wide format
```{r c}
Deflator   <-spread(Deflator,Period,Value)
Nominal_Q  <-spread(Nominal_Q,Period,Value)
Nominal_Y  <-spread(Nominal_Y,Period,Value)
Real_Q     <-spread(Real_Q,Period,Value)
Real_Y     <-spread(Real_Y,Period,Value)
```

Creating a check to verify whether the year figures are consistent with Stavaza
```{r c}
Check.Nominal.Y.2013   <-select(Nominal_Y,STATID,`2013`)

as.character(stavaza$Werk.ISIC)
 
stavaza                <- select(stavaza,
                           c(Werk.ISIC,B1.g,TAB.CAT,TAB.CAT_DESCRIPTION,ISIC_DESCRIPTION))

Check.Nominal.Y.2013   <- select(Check.Nominal.Y.2013,c(STATID,`2013`))

Test.equality          <- left_join(stavaza,Check.Nominal.Y.2013,
                   by=c("Werk.ISIC"="STATID"))

rm(Check.Nominal.Y.2013)

Test.equality$Check    <-Test.equality$`2013`==Test.equality$B1.g

Test.equality          <- Test.equality[,c(1,3,4,5,2,6,7)]
dplyr::arrange(Test.equality,Werk.ISIC)

rm(stavaza)

Status.complete<- (length(which(Test.equality$Check=="TRUE")) + length(which(Test.equality$Check=="FALSE")))/length(Test.equality$Check)*100

```

Need to add code to correctly display year name
```{r d}
Deflator  <- setNames(Deflator,  c("STATID","Y_2013","Y_2014","Y_2015","Y_2016","Y_2017"))
Nominal_Y <- setNames(Nominal_Y, c("STATID","Y_2013","Y_2014","Y_2015","Y_2016","Y_2017"))
Real_Y    <- setNames(Real_Y,    c("STATID","Y_2013","Y_2014","Y_2015","Y_2016","Y_2017"))
```

Add series name
```{R}
# Deflator
Deflator<- left_join(Deflator,Test.equality,
                   by=c("STATID"="Werk.ISIC"))
Deflator<- select(Deflator,c(STATID,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017,
                                       TAB.CAT,
                                       TAB.CAT_DESCRIPTION,
                                       ISIC_DESCRIPTION
                                       ))
Deflator         <- Deflator[,c(1,7,8,9,2,3,4,5,6)]
dplyr::arrange(Deflator,TAB.CAT)

# Nominal_Y
Nominal_Y<- left_join(Nominal_Y,Test.equality,
                   by=c("STATID"="Werk.ISIC"))
Nominal_Y<- select(Nominal_Y,c(STATID,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017,
                                       TAB.CAT,
                                       TAB.CAT_DESCRIPTION,
                                       ISIC_DESCRIPTION
                                       ))
Nominal_Y          <- Nominal_Y[,c(1,7,8,9,2,3,4,5,6)]
dplyr::arrange(Nominal_Y,TAB.CAT)

# Real_Y
Real_Y<- left_join(Real_Y,Test.equality,
                   by=c("STATID"="Werk.ISIC"))
Real_Y<- select(Real_Y,c(STATID,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017,
                                       TAB.CAT,
                                       TAB.CAT_DESCRIPTION,
                                       ISIC_DESCRIPTION
                                       ))
Real_Y          <- Real_Y[,c(1,7,8,9,2,3,4,5,6)]
dplyr::arrange(Real_Y,TAB.CAT)
```

Grouping by TAB.CAT for Publication tables
```{r}
# Nominal_Y
PUB_Nominal_Y <- group_by(Nominal_Y,TAB.CAT) %>%
  summarise(TAB.CAT_DESCRIPTION=first(TAB.CAT_DESCRIPTION),
    Y.2013=sum(Y_2013),
    Y.2014=sum(Y_2014),
    Y.2015=sum(Y_2015),
    Y.2016=sum(Y_2016),
    Y.2017=sum(Y_2017)
  )

# Real_Y
PUB_Real_Y <- group_by(Real_Y,TAB.CAT) %>%
  summarise(TAB.CAT_DESCRIPTION=first(TAB.CAT_DESCRIPTION),
    Y.2013=sum(Y_2013),
    Y.2014=sum(Y_2014),
    Y.2015=sum(Y_2015),
    Y.2016=sum(Y_2016),
    Y.2017=sum(Y_2017)
  )
```

Creating growth variables
```{r}
PUB_Nominal_Y$g.2014 <- (PUB_Nominal_Y$Y.2014/PUB_Nominal_Y$Y.2013-1)*100
PUB_Nominal_Y$g.2015 <- (PUB_Nominal_Y$Y.2015/PUB_Nominal_Y$Y.2014-1)*100
PUB_Nominal_Y$g.2016 <- (PUB_Nominal_Y$Y.2016/PUB_Nominal_Y$Y.2015-1)*100
PUB_Nominal_Y$g.2017 <- (PUB_Nominal_Y$Y.2017/PUB_Nominal_Y$Y.2016-1)*100

PUB_Real_Y$g.2014 <- (PUB_Real_Y$Y.2014/PUB_Real_Y$Y.2013-1)*100
PUB_Real_Y$g.2015 <- (PUB_Real_Y$Y.2015/PUB_Real_Y$Y.2014-1)*100
PUB_Real_Y$g.2016 <- (PUB_Real_Y$Y.2016/PUB_Real_Y$Y.2015-1)*100
PUB_Real_Y$g.2017 <- (PUB_Real_Y$Y.2017/PUB_Real_Y$Y.2016-1)*100
```

Create Treemap
```{r}
ggplot2::ggplot(PUB_Nominal_Y, ggplot2::aes(area = Y.2017, fill = g.2017)) + 
  geom_treemap()+
  ggtitle("Nominal GDP 2017")+
  geom_treemap_text(label = PUB_Nominal_Y$TAB.CAT_DESCRIPTION)
```

Write csv files. Not working at the moment. xlsx package doesn't load.
```{r}
write.xlsx(Deflator, file="Output_Q_NA.xlsx",
      sheetName="Deflator", append=FALSE)
write.xlsx(Nominal_Q, file="Output_Q_NA.xlsx", 
           sheetName="Nominal_Q", append=TRUE)
write.xlsx(Real_Q, file="Output_Q_NA.xlsx", 
           sheetName="Real_Q", append=TRUE)
write.xlsx(Nominal_Y, file="Output_Q_NA.xlsx", 
           sheetName="Nominal_Y", append=TRUE)
write.xlsx(Real_Y, file="Output_Q_NA.xlsx", 
           sheetName="Real_Y", append=TRUE)
write.xlsx(Test.equality, file="Output_Q_NA.xlsx", 
           sheetName="Summary", append=TRUE)
```


This does work. However, would like to have all the tabs combined.
```{r }
write.csv(Deflator, file =       "Output_Deflator.csv")
write.csv(Nominal_Q, file =      "Output_Nominal_Q.csv")
write.csv(Real_Q, file =         "Output_Real_Q.csv")
write.csv(Nominal_Y, file =      "Output_Nominal_Y.csv")
write.csv(Real_Y, file =         "Output_Real_Y.csv")
write.csv(Test.equality, file =  "Output_Summary.csv")
write.csv(PUB_Nominal_Y.time, file =  "PUB_Nom.csv")
```


To do: 

- Find source of bug that prevents Knitr from creating the word document.
- Output csv. files.
- If possible e-mail markdown outputs to Herry via Outlook
- Convert evrything to to time series
- Start graphing.
