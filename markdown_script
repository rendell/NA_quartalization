---
title: "Quarterly output manipulation National Accounts"
author: "Rendell E . de Kort"
date: "January 31, 2019"
output: word_document
---

```{r v}
data1    <-  read.csv("Q_DENTON.csv")
data2    <-  read.csv("Q_NO_DENTON.csv")
stavaza  <-  read.csv("stavazaR.csv")
Nominal.Y.compressed <- read.csv("compressed.csv")
```

## About this file

This is an explanatory note for the steps to convert quarterly output information obtained through the "Herbynization", "quarterly estimation" and "quarterly exceptions" file.

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.



## Reading in the data (not working in the Shiny code)
Data should be in "Comma Seperated Values" (csv.) format to be loaded in and saved in the folder that is consistent with the Working Directory of th R session.


Load the dplyr package and transform the data into a tbl_df format and merge.

```{r a}
library(dplyr)
data1                  <- tbl_df(data1)
data2                  <- tbl_df(data2)
databind               <- bind_rows(data1,data2)
rm(data1)
rm(data2)
dplyr::arrange(databind,STATID)
```

Filtering data to contain the sections that we are interested seperatly


```{r b}
Nominal_Q              <- filter(databind,databind$Description=="Nominal VA")
Nominal_Q$Description  <- NULL

Real_Q                 <- filter(databind,databind$Description=="Real VA")
Real_Q$Description     <- NULL

Nominal_Y              <- filter(databind,databind$Description=="B nominal")
Nominal_Y$Description  <- NULL

Real_Y                 <- filter(databind,databind$Description=="B Real")
Real_Y$Description     <- NULL

Deflator               <- filter(databind,databind$Description=="Deflator")
Deflator$Description   <- NULL

rm(databind)

# Deflator
Deflator.2013 <- filter(Deflator,Deflator$Period=="2013")
Deflator.2013$Y_2013 <- Deflator.2013$Value
Deflator.2013$Value  <- NULL
Deflator.2013$Period <- NULL

Deflator.2014 <- filter(Deflator,Deflator$Period=="2014")
Deflator.2014$Y_2014 <- Deflator.2014$Value
Deflator.2014$Value  <- NULL
Deflator.2014$Period <- NULL

Deflator.2015 <- filter(Deflator,Deflator$Period=="2015")
Deflator.2015$Y_2015 <- Deflator.2015$Value
Deflator.2015$Value  <- NULL
Deflator.2015$Period <- NULL

Deflator.2016 <- filter(Deflator,Deflator$Period=="2016")
Deflator.2016$Y_2016 <- Deflator.2016$Value
Deflator.2016$Value  <- NULL
Deflator.2016$Period <- NULL

Deflator.2017 <- filter(Deflator,Deflator$Period=="2017")
Deflator.2017$Y_2017 <- Deflator.2017$Value
Deflator.2017$Value  <- NULL
Deflator.2017$Period <- NULL

Deflator.time<-bind_cols(Deflator.2013,
                         Deflator.2014,
                         Deflator.2015,
                         Deflator.2016,
                         Deflator.2017)
Deflator.time$STATID1<- NULL
Deflator.time$STATID2<- NULL
Deflator.time$STATID3<- NULL
Deflator.time$STATID4<- NULL

rm(Deflator.2013)
rm(Deflator.2014)
rm(Deflator.2015)
rm(Deflator.2016)
rm(Deflator.2017)


# Nominal_Y
Nominal_Y.2013 <- filter(Nominal_Y,Nominal_Y$Period=="2013")
Nominal_Y.2013$Y_2013 <- Nominal_Y.2013$Value
Nominal_Y.2013$Value  <- NULL
Nominal_Y.2013$Period <- NULL

Nominal_Y.2014 <- filter(Nominal_Y,Nominal_Y$Period=="2014")
Nominal_Y.2014$Y_2014 <- Nominal_Y.2014$Value
Nominal_Y.2014$Value  <- NULL
Nominal_Y.2014$Period <- NULL

Nominal_Y.2015 <- filter(Nominal_Y,Nominal_Y$Period=="2015")
Nominal_Y.2015$Y_2015 <- Nominal_Y.2015$Value
Nominal_Y.2015$Value  <- NULL
Nominal_Y.2015$Period <- NULL

Nominal_Y.2016 <- filter(Nominal_Y,Nominal_Y$Period=="2016")
Nominal_Y.2016$Y_2016 <- Nominal_Y.2016$Value
Nominal_Y.2016$Value  <- NULL
Nominal_Y.2016$Period <- NULL

Nominal_Y.2017 <- filter(Nominal_Y,Nominal_Y$Period=="2017")
Nominal_Y.2017$Y_2017 <- Nominal_Y.2017$Value
Nominal_Y.2017$Value  <- NULL
Nominal_Y.2017$Period <- NULL

Nominal_Y.time<-bind_cols(Nominal_Y.2013,
                         Nominal_Y.2014,
                         Nominal_Y.2015,
                         Nominal_Y.2016,
                         Nominal_Y.2017)
Nominal_Y.time$STATID1<- NULL
Nominal_Y.time$STATID2<- NULL
Nominal_Y.time$STATID3<- NULL
Nominal_Y.time$STATID4<- NULL

rm(Nominal_Y.2013)
rm(Nominal_Y.2014)
rm(Nominal_Y.2015)
rm(Nominal_Y.2016)
rm(Nominal_Y.2017)

#Real_Y
Real_Y.2013 <- filter(Real_Y,Real_Y$Period=="2013")
Real_Y.2013$Y_2013 <- Real_Y.2013$Value
Real_Y.2013$Value  <- NULL
Real_Y.2013$Period <- NULL

Real_Y.2014 <- filter(Real_Y,Real_Y$Period=="2014")
Real_Y.2014$Y_2014 <- Real_Y.2014$Value
Real_Y.2014$Value  <- NULL
Real_Y.2014$Period <- NULL

Real_Y.2015 <- filter(Real_Y,Real_Y$Period=="2015")
Real_Y.2015$Y_2015 <- Real_Y.2015$Value
Real_Y.2015$Value  <- NULL
Real_Y.2015$Period <- NULL

Real_Y.2016 <- filter(Real_Y,Real_Y$Period=="2016")
Real_Y.2016$Y_2016 <- Real_Y.2016$Value
Real_Y.2016$Value  <- NULL
Real_Y.2016$Period <- NULL

Real_Y.2017 <- filter(Real_Y,Real_Y$Period=="2017")
Real_Y.2017$Y_2017 <- Real_Y.2017$Value
Real_Y.2017$Value  <- NULL
Real_Y.2017$Period <- NULL

Real_Y.time<-bind_cols(Real_Y.2013,
                         Real_Y.2014,
                         Real_Y.2015,
                         Real_Y.2016,
                         Real_Y.2017)
Real_Y.time$STATID1<- NULL
Real_Y.time$STATID2<- NULL
Real_Y.time$STATID3<- NULL
Real_Y.time$STATID4<- NULL

rm(Real_Y.2013)
rm(Real_Y.2014)
rm(Real_Y.2015)
rm(Real_Y.2016)
rm(Real_Y.2017)

#Nominal_Q



#Real_Q

#Needs to be continued

```

Creating a check to verify whether the year figures are consistent with Stavaza
```{r c}
Check.Nominal.Y.2013   <-filter(Nominal_Y,Period=="2013")

as.character(stavaza$Werk.ISIC)
 
stavaza                <- select(stavaza,
                           c(Werk.ISIC,B1.g,TAB.CAT,TAB.CAT_DESCRIPTION,ISIC_DESCRIPTION))

Check.Nominal.Y.2013   <- select(Check.Nominal.Y.2013,c(STATID,Value))

Test.equality          <- left_join(stavaza,Check.Nominal.Y.2013,
                   by=c("Werk.ISIC"="STATID"))

rm(Check.Nominal.Y.2013)

Test.equality$Check    <-Test.equality$Value==Test.equality$B1.g

Test.equality          <- Test.equality[,c(1,3,4,5,2,6,7)]
# Is this really necesarry? dplyr::arrange(Test.equality,Werk.ISIC)

rm(stavaza)

```

Convert from long form to wide format
```{r d}
library(tidyr)
Deflator   <-spread(Deflator,STATID,Value)
Nominal_Q  <-spread(Nominal_Q,STATID,Value)
Nominal_Y  <-spread(Nominal_Y,STATID,Value)
Real_Q     <-spread(Real_Q,STATID,Value)
Real_Y     <-spread(Real_Y,STATID,Value)

Deflator$Period  <- c(2013,2014,2015,2016,2017)
Real_Y$Period    <- c(2013,2014,2015,2016,2017)
Nominal_Y$Period <- c(2013,2014,2015,2016,2017)

## Need to add quarterly series

```

Add series name
```{R}
# Deflator
Deflator.time<- left_join(Deflator.time,Test.equality,
                   by=c("STATID"="Werk.ISIC"))
Deflator.time<- select(Deflator.time,c(STATID,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017,
                                       TAB.CAT,
                                       TAB.CAT_DESCRIPTION,
                                       ISIC_DESCRIPTION
                                       ))
Deflator.time          <- Deflator.time[,c(1,7,8,9,2,3,4,5,6)]
dplyr::arrange(Deflator.time,TAB.CAT)

# Nominal_Y
Nominal_Y.time<- left_join(Nominal_Y.time,Test.equality,
                   by=c("STATID"="Werk.ISIC"))
Nominal_Y.time<- select(Nominal_Y.time,c(STATID,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017,
                                       TAB.CAT,
                                       TAB.CAT_DESCRIPTION,
                                       ISIC_DESCRIPTION
                                       ))
Nominal_Y.time          <- Nominal_Y.time[,c(1,7,8,9,2,3,4,5,6)]
dplyr::arrange(Nominal_Y.time,TAB.CAT)

# Real_Y
Real_Y.time<- left_join(Real_Y.time,Test.equality,
                   by=c("STATID"="Werk.ISIC"))
Real_Y.time<- select(Real_Y.time,c(STATID,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017,
                                       TAB.CAT,
                                       TAB.CAT_DESCRIPTION,
                                       ISIC_DESCRIPTION
                                       ))
Real_Y.time          <- Real_Y.time[,c(1,7,8,9,2,3,4,5,6)]
dplyr::arrange(Real_Y.time,TAB.CAT)
```


Grouping by TAB.CAT for Publication tables
```{r}
# Nominal_Y
PUB_Nominal_Y.time <- group_by(Nominal_Y.time,TAB.CAT) %>%
  summarise(TAB.CAT_DESCRIPTION=first(TAB.CAT_DESCRIPTION),
    Y.2013=sum(Y_2013),
    Y.2014=sum(Y_2014),
    Y.2015=sum(Y_2015),
    Y.2016=sum(Y_2016),
    Y.2017=sum(Y_2017)
  )

# Real_Y
PUB_Real_Y.time <- group_by(Real_Y.time,TAB.CAT) %>%
  summarise(TAB.CAT_DESCRIPTION=first(TAB.CAT_DESCRIPTION),
    Y.2013=sum(Y_2013),
    Y.2014=sum(Y_2014),
    Y.2015=sum(Y_2015),
    Y.2016=sum(Y_2016),
    Y.2017=sum(Y_2017)
  )

```


Left join compression
```{r}
Nominal.Y.compressed<- left_join(Nominal.Y.compressed,Test.equality,
                   by=c("TAB.CAT_DESCRIPTION"="TAB.CAT_DESCRIPTION"))
Nominal.Y.compressed<- select(Real_Y.time,c(STATID,
                                       Y_2013,
                                       Y_2014,
                                       Y_2015,
                                       Y_2016,
                                       Y_2017,
                                       TAB.CAT,
                                       TAB.CAT_DESCRIPTION,
                                       ISIC_DESCRIPTION
                                       ))
Real_Y.time          <- Real_Y.time[,c(1,7,8,9,2,3,4,5,6)]



````


########Using the "t" function, which is outside the tidyverse. So 
```{r d}
Deflator <- t(Deflator)
rownames(Deflator) = c(2013,2014,2015,2016,2017)

Deflator <- tbl_df(Deflator)
colnames(Deflator) = Deflator[1, ]
Deflator = Deflator[-1, ]
```



Write csv files. Not working at the moment. xlsx package doesn't load.
```{r}
write.xlsx(Deflator, file="Output_Q_NA.xlsx",
      sheetName="Deflator", append=FALSE)
write.xlsx(Nominal_Q, file="Output_Q_NA.xlsx", 
           sheetName="Nominal_Q", append=TRUE)
write.xlsx(Real_Q, file="Output_Q_NA.xlsx", 
           sheetName="Real_Q", append=TRUE)
write.xlsx(Nominal_Y, file="Output_Q_NA.xlsx", 
           sheetName="Nominal_Y", append=TRUE)
write.xlsx(Real_Y, file="Output_Q_NA.xlsx", 
           sheetName="Real_Y", append=TRUE)
write.xlsx(Test.equality, file="Output_Q_NA.xlsx", 
           sheetName="Summary", append=TRUE)
```


This does work. However, would like to have all the tabs combined.
```{r }
write.csv(Deflator, file =       "Output_Deflator.csv")
write.csv(Nominal_Q, file =      "Output_Nominal_Q.csv")
write.csv(Real_Q, file =         "Output_Real_Q.csv")
write.csv(Nominal_Y, file =      "Output_Nominal_Y.csv")
write.csv(Real_Y, file =         "Output_Real_Y.csv")
write.csv(Test.equality, file =  "Output_Summary.csv")
```

Creating growth variables
```{r}
PUB_Nominal_Y.time$g.2017 <- (PUB_Nominal_Y.time$Y.2017/PUB_Nominal_Y.time$Y.2016-1)*100

```

Create Treemap
```{r}
ggplot2::ggplot(PUB_Nominal_Y.time, ggplot2::aes(area = Y.2017, fill = g.2017)) + 
  geom_treemap()+
  ggtitle("Nominal GDP 2017")+
  geom_treemap_text(label = PUB_Nominal_Y.time$TAB.CAT_DESCRIPTION)


```

To do: 

- In Test.equality$Value, need to sum up filled in fields and divide by total B1.g.
- In Test.equality$Value, need to count filled in cells and display missing.
- Find source of bug that prevents Knitr from creating the word document.
- Output csv. files.
- If possible e-mail markdown outputs to Herry via Outlook
- Convert evrything to to time series
- Start graphing.
